from fileinput import filename
from glob import escape
from flask import Flask, request, jsonify
from flask.json import JSONEncoder
import keras
import numpy as np
from markupsafe import escape


app = Flask(__name__)
app.config['JSON_AS_ASCII'] = False

@app.route("/predict_price/<fileName>", methods=['GET'])
def hello1(fileName) :
    from keras.models import load_model
    model = load_model('C:/Users/mom/Desktop/test1/traffic_model_2.h5')

    label_to_str = ["자형 교차로"
    ,"T자형 교차로"
    ,"Y자형 교차로"
    ,"ㅏ자형 교차로"
    ,"ㅓ자형 교차로"
    ,"우선 도로"
    ,"우합류 도로"
    ,"좌합류 도로"
    ,"회전형 교차로"
    ,"철길 건널목"
    ,"우로 굽은 도로"
    ,"좌로 굽은 도로"
    ,"우좌로 이중 굽은 도로"
    ,"좌우로 이중 굽은 도로"
    ,"오르막 경사"
    ,"내리막 경사"
    ,"도로 폭이 좁아짐"
    ,"우측 차로 없어짐"
    ,"좌측 차로 없어짐"
    ,"우측방 통행"
    ,"양측방 통행"
    ,"중앙 분리대 시작"
    ,"중앙 분리대 끝남"
    ,"신호기"
    ,"미끄러운 도로"
    ,"강변 도로"
    ,"노면 고르지 못함"
    ,"과속 방지턱"
    ,"낙석 도로"
    ,"횡단 보도(주의)"
    ,"어린이 보호(주의)"
    ,"자전거(주의)"
    ,"도로 공사중"
    ,"비행기"
    ,"횡풍"
    ,"터널"
    ,"야생 동물 보호"
    ,"위험"
    ,"상습 정체 구간"
    ,"2방향 통행"
    ,"교량"
    ,"통행 금지"
    ,"자동차 통행 금지"
    ,"화물차 통행 금지"
    ,"승합차 통행 금지"
    ,"이륜차 및 원동기장치자전거 통행 금지"
    ,"자동차, 이륜차 및 원동기장치자전거 통행 금지"
    ,"경운기, 트랙터 및 손수레 통행 금지"
    ,"자전거 통행 금지"
    ,"진입 금지"
    ,"직진 금지"
    ,"우회전 금지"
    ,"좌회전 금지"
    ,"유턴 금지"
    ,"앞지르기 금지"
    ,"주정차 금지"
    ,"주차 금지"
    ,"차 중량 제한"
    ,"차 높이 제한"
    ,"차 폭 제한"
    ,"차간 거리 확보"
    ,"최고 속도 제한"
    ,"최저 속도 제한"
    ,"서행"
    ,"일시 정지"
    ,"양보"
    ,"보행자 보행 금지"
    ,"위험물적재차량 통행 금지"
    ,"자동차 전용 도로"
    ,"자전거 전용 도로"
    ,"자전거 및 보행자 겸용 도로"
    ,"회전 교차로"
    ,"직진"
    ,"우회전"
    ,"좌회전"
    ,"직진 및 우회전"
    ,"직진 및 좌회전"
    ,"좌우회전"
    ,"유턴"
    ,"양측방 통행"
    ,"우측면 통행"
    ,"좌측면 통행"
    ,"진행 방향별 통행 구분"
    ,"우회로"
    ,"자전거 및 보행자 통행구분"
    ,"자전거 전용 차로"
    ,"주차장"
    ,"자전거 주차장"
    ,"보행자 전용 도로"
    ,"횡단 보도"
    ,"노인 보호"
    ,"어린이 보호"
    ,"자전거 횡단 도로"
    ,"일방 통행(우)"
    ,"일방 통행(좌)"
    ,"일방 통행(직)"
    ,"비보호 좌회전"
    ,"자전거 나란히"
    ,"버스 전용 차로"
    ,"다인승 차량 전용 차로"
    ,"통행 우선"
    ,"좌회전 및 유턴"
    ,"장애인 보호"]

    categories = [
      "0"
    , "1"
    , "10"
    , "100"
    , "101"
    , "102"
    , "11"
    , "12"
    , "13"
    , "14"
    , "15"
    , "16"
    , "17"
    , "18"
    , "19"
    , "2"
    , "20"
    , "21"
    , "22"
    , "23"
    , "24"
    , "25"
    , "26"
    , "27"
    , "28"
    , "29"
    , "3"
    , "30"
    , "31"
    , "32"
    , "33"
    , "34"
    , "35"
    , "36"
    , "37"
    , "38"
    , "39"
    , "4"
    , "40"
    , "41"
    , "42"
    , "43"
    , "44"
    , "45"
    , "46"
    , "47"
    , "48"
    , "49"
    , "5"
    , "50"
    , "51"
    , "52"
    , "53"
    , "54"
    , "55"
    , "56"
    , "57"
    , "58"
    , "59"
    , "6"
    , "60"
    , "61"
    , "62"
    , "63"
    , "64"
    , "65"
    , "66"
    , "67"
    , "68"
    , "69"
    , "7"
    , "70"
    , "71"
    , "72"
    , "73"
    , "74"
    , "75"
    , "76"
    , "77"
    , "78"
    , "79"
    , "8"
    , "80"
    , "81"
    , "82"
    , "83"
    , "84"
    , "85"
    , "86"
    , "87"
    , "88"
    , "89"
    , "9"
    , "90"
    , "91"
    , "92"
    , "93"
    , "94"
    , "95"
    , "96"
    , "97"
    , "98"
    , "99"]


    from PIL import Image
    image_w = 64
    image_h = 64
    X = []
    img = Image.open('C:/Users/mom/Desktop/wadago/wadago_project/src/main/resources/static/img/%s' % escape(fileName))
    img = img.convert("RGB")
    img_resized = img.resize((image_w, image_h))
    data = np.asarray(img_resized)
    X.append(data)
    X = np.array(X)
    X = X.astype(float) / 255


    result = label_to_str[int(categories[np.argmax(model.predict(X) , axis=1)[0]])]


    return result , 200

@app.route("/hello", methods=['GET'])
def hello() :
    return "hello world", 200

if __name__ == '__main__':
    app.run(debug=False,host="127.0.0.1",port=5555)